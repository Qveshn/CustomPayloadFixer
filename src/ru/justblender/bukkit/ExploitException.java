package ru.justblender.bukkit;

import com.comphenix.protocol.wrappers.nbt.NbtCompound;
import com.comphenix.protocol.wrappers.nbt.NbtFactory;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.json.simple.JSONValue;

import java.util.ArrayList;
import java.util.List;

public class ExploitException extends Throwable {
    private ItemStack itemStack = null;

    ExploitException(String message) {
        super(message);
    }

    ExploitException(String message, Throwable cause) {
        super(message, cause);
    }

    ExploitException(String message, ItemStack itemStack) {
        super(message);
        this.itemStack = itemStack;
    }

    String itemstackToLogString(String startString) {
        if (itemStack == null) return "";
        try {
            Material type = itemStack.getType();
            List<String> list = new ArrayList<>();
            if (type.isBlock()) list.add("Block");
            if (type.isBurnable()) list.add("Burnable");
            if (type.isEdible()) list.add("Edible");
            if (type.isFlammable()) list.add("Flammable");
            if (type.isOccluding()) list.add("Occluding");
            if (type.isRecord()) list.add("Record");
            if (type.isSolid()) list.add("Solid");
            if (type.isTransparent()) list.add("Transparent");
            @SuppressWarnings("deprecation")int typeId = itemStack.getData().getItemTypeId();
            @SuppressWarnings("deprecation") byte typeData = itemStack.getData().getData();

            NbtCompound root = (NbtCompound) NbtFactory.fromItemTag(itemStack);
            return String.format("%s %s:%d (%d:%d) x %d%s, nbt:%s",
                    startString,
                    itemStack.getType(), itemStack.getDurability(), typeId, typeData, itemStack.getAmount(),
                    list.size() > 0 ? String.format(" (%s)", String.join("|", list)) : "",
                    JSONValue.toJSONString(root)
            );

        } catch (Throwable ex) {
            return " Error while deserializing ItemStack";
        }
    }

    boolean hasItemStack() {
        return itemStack != null;
    }
}
